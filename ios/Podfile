# Set minimum iOS platform version - matches FlutterFlow configuration that works on iOS 18.6.2
platform :ios, '14.0'

# CocoaPods analytics sends network stats synchronously affecting flutter build latency.
ENV['COCOAPODS_DISABLE_STATS'] = 'true'

project 'Runner', {
  'Debug' => :debug,
  'Profile' => :release,
  'Release' => :release,
}

def flutter_root
  generated_xcode_build_settings_path = File.expand_path(File.join('..', 'Flutter', 'Generated.xcconfig'), __FILE__)
  unless File.exist?(generated_xcode_build_settings_path)
    raise "#{generated_xcode_build_settings_path} must exist. If you're running pod install manually, make sure flutter pub get is executed first"
  end

  File.foreach(generated_xcode_build_settings_path) do |line|
    matches = line.match(/FLUTTER_ROOT\=(.*)/)
    return matches[1].strip if matches
  end
  raise "FLUTTER_ROOT not found in #{generated_xcode_build_settings_path}. Try deleting Generated.xcconfig, then run flutter pub get"
end

require File.expand_path(File.join('packages', 'flutter_tools', 'bin', 'podhelper'), flutter_root)

flutter_ios_podfile_setup

target 'Runner' do
  use_frameworks!
  use_modular_headers!

  flutter_install_all_ios_pods File.dirname(File.realpath(__FILE__))

  target 'RunnerTests' do
    inherit! :search_paths
  end

  # Share Extension target - inherits search paths from Runner
  # This allows the Share Extension to access receive_sharing_intent
  target 'shareExtension' do
    inherit! :search_paths
    flutter_install_ios_plugin_pods File.dirname(File.realpath(__FILE__))
  end
end

post_install do |installer|
  installer.pods_project.targets.each do |target|
    flutter_additional_ios_build_settings(target)

    # FlutterFlow approach for iOS 18.6.2 compatibility
    # Delete IPHONEOS_DEPLOYMENT_TARGET to use project-level minimum (14.0)
    target.build_configurations.each do |config|
      config.build_settings.delete 'IPHONEOS_DEPLOYMENT_TARGET'
    end
  end

  # Remove path_provider_foundation from GeneratedPluginRegistrant
  # We use Directory.systemTemp instead which doesn't require a plugin
  registrant_path = File.join(File.dirname(__FILE__), 'Runner', 'GeneratedPluginRegistrant.m')
  if File.exist?(registrant_path)
    puts "Removing path_provider_foundation from GeneratedPluginRegistrant.m"
    registrant_content = File.read(registrant_path)
    registrant_content.gsub!(/\[PathProviderPlugin registerWithRegistrar.*?\];/, '// PathProviderPlugin removed')
    registrant_content.gsub!(/#import <path_provider_foundation.*?>/, '// path_provider_foundation removed')
    File.write(registrant_path, registrant_content)
  end
end
